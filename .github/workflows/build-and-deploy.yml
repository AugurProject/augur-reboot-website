name: Build and Deploy Augur Site with Fork Risk Monitoring

on:
  schedule:
    # Run every hour at minute 5 for fork risk monitoring
    - cron: '5 * * * *'
  workflow_dispatch:
    # Allow manual trigger with deployment control
    inputs:
      deploy_to_production:
        description: 'Deploy to gh-pages? (only works on main branch)'
        type: boolean
        default: false
      custom_rpc_url:
        description: 'Custom Ethereum RPC URL for testing'
        required: false
        type: string
  push:
    branches: [main]
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]

permissions:
  contents: write
  pages: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Calculate fork risk data
        run: npm run build:fork-data
        env:
          # Optional: Custom RPC can be provided via secrets or manual dispatch input
          # If not provided, will use public RPCs (no API key needed!)
          ETH_RPC_URL: ${{ secrets.ETH_RPC_URL || github.event.inputs.custom_rpc_url }}
          
      - name: Build site
        run: npm run build
        env:
          PUBLIC_GA_ID: ${{ vars.PUBLIC_GA_ID }}

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: augur-site-build-${{ github.run_number }}
          path: dist/
          retention-days: 7

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: |
      github.ref == 'refs/heads/main' && 
      (github.event_name == 'push' || 
       github.event_name == 'schedule' ||
       (github.event_name == 'workflow_dispatch' && 
        github.event.inputs.deploy_to_production == 'true'))
    
    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: augur-site-build-${{ github.run_number }}
          path: dist/

      - name: Deploy to gh-pages
        run: |
          # Checkout gh-pages branch
          git checkout gh-pages
          git pull origin gh-pages
          
          # Clear everything except .git and dist
          find . -mindepth 1 -maxdepth 1 ! -name '.git' ! -name 'dist' -exec rm -rf {} +
          
          # Move built files to root
          mv dist/* .
          rm -rf dist
          
          # Add .nojekyll to prevent Jekyll processing
          touch .nojekyll

      - name: Check for changes
        id: changes
        run: |
          if git diff --quiet HEAD; then
            echo "No changes to commit"
            echo "has_changes=false" >> $GITHUB_OUTPUT
          else
            echo "Changes detected"
            echo "has_changes=true" >> $GITHUB_OUTPUT
            git status --porcelain
          fi

      - name: Commit and push changes
        if: steps.changes.outputs.has_changes == 'true'
        run: |
          git add .
          git commit -m "Deploy from main: $(git log main -1 --pretty=format:'%h %s')"
          git push origin gh-pages

  summary:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: augur-site-build-${{ github.run_number }}
          path: dist/

      - name: Create build summary
        run: |
          echo "## 📦 Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u +"%Y-%m-%d %H:%M UTC")" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Extract key metrics from JSON using jq (more reliable than grep)
          if [ -f dist/data/fork-risk.json ]; then
            if command -v jq >/dev/null 2>&1; then
              RISK_LEVEL=$(jq -r '.riskLevel' dist/data/fork-risk.json)
              RISK_PERCENT=$(jq -r '.riskPercentage' dist/data/fork-risk.json)
              LARGEST_BOND=$(jq -r '.metrics.largestDisputeBond' dist/data/fork-risk.json)
              THRESHOLD_PERCENT=$(jq -r '.metrics.forkThresholdPercent' dist/data/fork-risk.json)
              ACTIVE_DISPUTES=$(jq -r '.metrics.activeDisputes' dist/data/fork-risk.json)
              RPC_ENDPOINT=$(jq -r '.rpcInfo.endpoint' dist/data/fork-risk.json)
              RPC_LATENCY=$(jq -r '.rpcInfo.latency' dist/data/fork-risk.json)
              
              echo "### 🚨 Fork Risk Data" >> $GITHUB_STEP_SUMMARY
              echo "**Risk Level:** ${RISK_LEVEL}" >> $GITHUB_STEP_SUMMARY
              echo "**Risk Percentage:** ${RISK_PERCENT}%" >> $GITHUB_STEP_SUMMARY
              echo "**Largest Dispute Bond:** ${LARGEST_BOND} REP" >> $GITHUB_STEP_SUMMARY
              echo "**Fork Threshold Progress:** ${THRESHOLD_PERCENT}% of 275,000 REP" >> $GITHUB_STEP_SUMMARY
              echo "**Active Disputes:** ${ACTIVE_DISPUTES}" >> $GITHUB_STEP_SUMMARY
              echo "**RPC Used:** ${RPC_ENDPOINT} (${RPC_LATENCY}ms)" >> $GITHUB_STEP_SUMMARY
            else
              echo "**Status:** Fork risk data calculated" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "⚠️ **Warning:** Fork risk data file not found" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🧪 Testing Instructions" >> $GITHUB_STEP_SUMMARY
          echo "1. **Download:** Click on the artifact \`augur-site-build-${{ github.run_number }}\` above" >> $GITHUB_STEP_SUMMARY
          echo "2. **Extract:** Unzip the downloaded file to a local folder" >> $GITHUB_STEP_SUMMARY
          echo "3. **Test locally:** Run one of these commands in the extracted folder:" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "   # Option 1: Node.js" >> $GITHUB_STEP_SUMMARY
          echo "   npx serve" >> $GITHUB_STEP_SUMMARY
          echo "   " >> $GITHUB_STEP_SUMMARY
          echo "   # Option 2: Python" >> $GITHUB_STEP_SUMMARY
          echo "   python -m http.server 8000" >> $GITHUB_STEP_SUMMARY
          echo "   \`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deployment status
          if [[ "${{ github.ref }}" == "refs/heads/main" && ("${{ github.event_name }}" == "push" || "${{ github.event_name }}" == "schedule" || ("${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.deploy_to_production }}" == "true")) ]]; then
            echo "### 🚀 Deployment Status" >> $GITHUB_STEP_SUMMARY
            echo "✅ **Production Deployment:** Deployed to gh-pages branch" >> $GITHUB_STEP_SUMMARY
            echo "**Site URL:** https://${{ github.repository_owner }}.github.io/$(basename ${{ github.repository }})/" >> $GITHUB_STEP_SUMMARY
          else
            echo "### 📦 Artifact Only" >> $GITHUB_STEP_SUMMARY
            echo "**Status:** Build completed, artifact created (no production deployment)" >> $GITHUB_STEP_SUMMARY
            if [[ "${{ github.ref }}" != "refs/heads/main" ]]; then
              echo "**Reason:** Not on main branch (current: ${{ github.ref_name }})" >> $GITHUB_STEP_SUMMARY
            elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.deploy_to_production }}" != "true" ]]; then
              echo "**Reason:** Manual trigger with deploy_to_production = false" >> $GITHUB_STEP_SUMMARY
            fi
          fi