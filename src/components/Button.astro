---
import { clsx } from 'clsx';

export interface Props {
  variant?: 'default' | 'destructive' | 'outline' | 'secondary' | 'ghost' | 'link';
  size?: 'default' | 'sm' | 'lg' | 'icon';
  as?: 'button' | 'a';
  href?: string;
  external?: boolean;
  class?: string;
}

const { 
  variant = 'default',
  size = 'default',
  as,
  href,
  external,
  class: className,
  ...rest 
} = Astro.props;

// Auto-detect element type (mimics shadcn's asChild behavior)
const element = href ? 'a' : (as || 'button');

// Auto-detect external links
const isExternal = external ?? (href?.startsWith('http') || href?.startsWith('//'));
const externalProps = isExternal ? { 
  target: "_blank", 
  rel: "noopener noreferrer" 
} : {};

// buttonVariants function (mimics shadcn's CVA approach)
function buttonVariants({ variant, size }) {
  const base = "inline-flex items-center justify-center whitespace-nowrap font-medium transition-colors focus:outline-none disabled:pointer-events-none disabled:opacity-50";
  
  const variants = {
    default: "bg-primary text-background hover:bg-primary/90",
    destructive: "bg-red-600 text-white hover:bg-red-600/90",
    outline: "border border-primary bg-transparent text-primary hover:bg-primary hover:text-background",
    secondary: "bg-muted text-muted-foreground hover:bg-muted/80",
    ghost: "text-foreground hover:bg-foreground/10",
    link: "text-foreground hover:text-loud-foreground focus:text-loud-foreground hover:fx-glow focus:fx-glow"
  };
  
  const sizes = {
    default: "h-10 px-4 py-2 text-sm",
    sm: "h-9 px-3 text-xs",
    lg: "h-11 px-8 text-base",
    icon: "h-10 w-10"
  };
  
  // Link variant doesn't use size classes
  const sizeClass = variant === 'link' ? '' : sizes[size];
  
  return clsx(base, variants[variant], sizeClass);
}

const buttonClasses = buttonVariants({ variant, size });
const allClasses = clsx(buttonClasses, className);

// Element-specific props
const elementProps = element === 'a' 
  ? { href, ...externalProps, class: allClasses, ...rest }
  : { type: 'button', class: allClasses, ...rest };
---

{element === 'a' ? (
  <a {...elementProps}>
    <slot />
  </a>
) : (
  <button {...elementProps}>
    <slot />
  </button>
)}
